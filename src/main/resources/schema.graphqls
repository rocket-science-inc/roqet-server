schema {
  query: RootQuery
  mutation: RootMutation
}

# -- Entities --

type User {
  id: ID!
  fullName: String!
}

type Event {
  id: ID!
  title: String!
  time: EventTimeOut!
  location: Location!
  image: CloudinaryImage!
  organizer: ID!
  description: String!
  ticketLink: String!
  agenda: [Records]
}

type Records {
  username: String!
  company: String!
  description: String!
  position: Int!
  title: String!
}

type Location {
  id: String!
  name: String!
  address: String!
  geometry: Geometry!
}

type Geometry {
  latitude: String!
  longitude: String!
}

type EventTimeOut {
  start: Float!
  end: Float!
}

type CloudinaryImage {
  bytes: Int
  created_at: String
  etag: String
  format: String
  height: Int
  original_filename: String
  placeholder: Boolean
  public_id: String
  resource_type: String
  secure_url: String
  signature: String
  tags: [String]
  type: String
  url: String
  version: Float
  width: Int
}

type Feed {
  count: Int
  page: Int
  next: Int
  records: [Event]
}

# -- !Entities --


# -- Inputs --

input LocationIn {
  id: String!
  name: String!
  address: String!
  geometry: GeometryIn!
}

input GeometryIn {
  latitude: String!
  longitude: String!
}

input EventTimeIn {
  start: Float!
  end: Float!
}

input RecordsIn {
  username: String!
  company: String!
  description: String!
  position: Int!
  title: String!
}

input CloudinaryImageIn {
  bytes: Int
  created_at: String
  etag: String
  format: String
  height: Int
  original_filename: String
  placeholder: Boolean
  public_id: String
  resource_type: String
  secure_url: String
  signature: String
  tags: [String]
  type: String
  url: String
  version: Float
  width: Int
}

input NewEvent {
  title: String!,
  organizer: Int!,
  image: CloudinaryImageIn!,
  description: String!,
  ticketLink: String!,
  location: LocationIn!,
  time: EventTimeIn!,
  agenda: [RecordsIn]
}

# -- !Inputs --


# -- Queries --

type RootQuery {
  feed(count: Int!, page: Int!): Feed!
  event(id: Int!): Event!
  events(count: Int!, page: Int!): [Event]
  findLocations(input: String!): [Location]
  findLocation(input: String!): Location
  user(id: Int!): User
  users(count: Int!, page: Int!): [User]
}

type RootMutation {
  createEvent(event: NewEvent!): Event!
}
